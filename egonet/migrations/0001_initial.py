# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-03 20:23
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('age', models.IntegerField(blank=True, help_text='If you are unsure, please provide your best guess', null=True, verbose_name='Age')),
                ('gender', models.CharField(blank=True, choices=[(b'M', 'Male'), (b'F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('nationality', django_countries.fields.CountryField(blank=True, help_text='If you are unsure, please provide your best guess', max_length=2, null=True, verbose_name='Nationality')),
                ('functional_area', models.IntegerField(blank=True, choices=[(1, 'Sales'), (2, 'Service'), (3, 'Manufacturing'), (4, 'Engineering/Research'), (5, 'Marketing/Distribution'), (6, 'Finance'), (7, 'Human resources'), (8, 'General Management'), (9, 'Other'), (10, 'Not working')], null=True, verbose_name='Functional Area')),
                ('attrs_added', models.BooleanField(default=False)),
                ('neighbors_added', models.BooleanField(default=False)),
                ('important_professional', models.BooleanField(default=False)),
                ('important_career', models.BooleanField(default=False)),
                ('buyin', models.BooleanField(default=False)),
                ('hinder_professional', models.BooleanField(default=False)),
                ('spend_free_time', models.BooleanField(default=False)),
                ('life_partner', models.BooleanField(default=False)),
                ('work', models.IntegerField(blank=True, choices=[(1, 'Same office/team'), (2, 'Same division'), (3, 'Different division'), (4, 'Different Company'), (5, 'Self employed'), (6, 'Not working')], help_text="Contact's workplace", null=True, verbose_name='Work')),
                ('rank', models.IntegerField(blank=True, choices=[(1, 'Higher'), (2, 'Simmilar'), (3, 'Lower'), (4, 'Self employed'), (5, 'Not working')], help_text="Contact's formal rank in the organization he/she works for", null=True, verbose_name='Rank')),
                ('helps', models.IntegerField(blank=True, choices=[(1, 'Not at all'), (2, 'Rarely'), (3, 'Sometimes'), (4, 'Frequently'), (5, 'A great deal')], help_text='Provides valuable help or technical advice to get my work done efficiently.', null=True, verbose_name='Helps')),
                ('time_knowing', models.FloatField(blank=True, help_text='Time knowing this contact in years. You can enter fractions, such as 2.5 or 0.5', null=True, verbose_name='Time knowing')),
                ('interaction', models.IntegerField(blank=True, choices=[(1, 'Daily'), (2, 'Weekly'), (3, 'Monthly'), (4, 'Less often')], help_text='How often do you talk or exchange emails with this contact.', null=True, verbose_name='Interaction')),
                ('strength', models.IntegerField(blank=True, choices=[(1, 'Very Close'), (2, 'Close'), (3, 'Neutral'), (4, 'Distant')], help_text="<strong>Very Close</strong>: Strong personal bond. <strong>Close</strong>: Feel close but without a strong personal bond. <strong>Neutral</strong>: This person is OK to work with, but no personal bond. <strong>Distant</strong>: Person you'd rather avoid and will seek out only if necessary.", null=True, verbose_name='Strength of the relationship')),
                ('context', models.IntegerField(blank=True, choices=[(1, 'School mate'), (2, 'Social/sports club'), (3, 'Religious service'), (4, 'Voluntary association'), (5, 'Political party'), (6, 'Business contact'), (7, 'Coworker'), (8, 'Common friend'), (9, 'Other')], help_text='Context in which you first met this contact.', null=True, verbose_name='Context')),
                ('trust', models.BooleanField(default=False, help_text='Select if you would trust this contact for important personal matters.', verbose_name='Trust')),
                ('reports_to_ego', models.BooleanField(default=False, help_text='Select if the contact reports directly to you.')),
                ('ego_reports_to', models.BooleanField(default=False, help_text='Select if you report directly to the contact.')),
                ('alteruuid', models.CharField(default=uuid.uuid4, editable=False, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Ego',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(null=True)),
                ('first_name', models.CharField(max_length=255, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=255, null=True, verbose_name='Last Name')),
                ('age', models.IntegerField(null=True, verbose_name='Age')),
                ('gender', models.CharField(choices=[(b'M', 'Male'), (b'F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('nationality', django_countries.fields.CountryField(help_text='If you have more than one, chose the one you identify with the most', max_length=2, null=True, verbose_name='Nationality')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='Email')),
                ('education', models.IntegerField(choices=[(1, 'Primary School'), (2, 'High School'), (3, 'College or Equivalent'), (4, 'Master'), (5, 'Doctorate')], help_text='The highest level of formal education you have attained', null=True, verbose_name='Eduaction')),
                ('salary', models.IntegerField(choices=[(1, 'less than 30,000 euros'), (2, '31,000 -- 50,000 euros'), (3, '51,000 -- 70,000 euros'), (4, '71,000 -- 90,000 euros'), (5, '91,000 -- 110,000 euros'), (6, '111,000 -- 150,000 euros'), (7, '151,000 -- 200,000 euros'), (8, '201,000 -- 300,000 euros'), (9, '301,000 -- 500,000 euros'), (10, 'more than 500,000 euros')], help_text='Your annual salary in euros.', null=True, verbose_name='Annual Salary')),
                ('company', models.CharField(blank=True, help_text='Company for which you currently work for', max_length=255, null=True, verbose_name='Company')),
                ('functional_area', models.IntegerField(choices=[(1, 'Sales'), (2, 'Service'), (3, 'Manufacturing'), (4, 'Engineering/Research'), (5, 'Marketing/Distribution'), (6, 'Finance'), (7, 'Human resources'), (8, 'General Management'), (9, 'Other'), (10, 'Not working')], help_text='Your primary functional area in the company', null=True, verbose_name='Functional Area')),
                ('current_job', models.IntegerField(choices=[(1, 'Individual Contributor'), (2, 'Team Leader'), (3, 'Manager'), (4, 'Middle Manager'), (5, 'Senior Manager'), (6, 'CEO/Chairman'), (7, 'Self-employed'), (8, 'Other')], null=True, verbose_name='Current Job')),
                ('tenure', models.FloatField(blank=True, help_text='Time you been working for this company.', null=True, verbose_name='Tenure')),
                ('people_in_company', models.IntegerField(blank=True, help_text='People currently employed by your company. Provide your best estimate. Enter 1 if you are self-employed', null=True, verbose_name='People in you company')),
                ('annual_sales', models.FloatField(blank=True, help_text='Company annual sales in US$ Millions, your best estimate.', null=True, verbose_name='Annual Sales')),
                ('completed', models.BooleanField(default=False)),
                ('egouuid', models.CharField(default=uuid.uuid4, editable=False, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('password', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('groupuuid', models.CharField(default=uuid.uuid4, editable=False, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength', models.IntegerField(blank=True, choices=[(1, 'Very Close'), (2, 'Close'), (3, 'Neutral'), (4, 'Distant')], null=True)),
                ('attrs_added', models.BooleanField(default=False)),
                ('reluuid', models.CharField(default=uuid.uuid4, editable=False, max_length=50)),
                ('ego', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='egonet.Ego')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source', to='egonet.Alter')),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target', to='egonet.Alter')),
            ],
        ),
        migrations.AddField(
            model_name='ego',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='egonet.Group'),
        ),
        migrations.AddField(
            model_name='alter',
            name='ego',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='egonet.Ego'),
        ),
        migrations.AddField(
            model_name='alter',
            name='neighbors',
            field=models.ManyToManyField(blank=True, null=True, related_name='_alter_neighbors_+', through='egonet.Relationship', to='egonet.Alter'),
        ),
    ]
