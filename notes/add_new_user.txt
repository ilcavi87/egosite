add the user $USER 

sudo add user $USER

# Checkout the egosite repo in its home directory

sudo su $USER
cd
git clone https://jtorrents@bitbucket.org/jtorrents/egosite.git

# Build the virtual environment

cd egosite
virtualenv egoenv
source egoenv/bin/activate
pip install -U distribute
pip install -r requirements.txt

# Deploy Django

Install gunicorn in our virtualenv:

pip install gunicorn

Bash script to control gunicorn: save to egoenv/bin/gunicorn_start

vi egoenv/bin/gunicorn_start

#!/bin/bash

ANAME="swift"
AUSER=swift

NAME=$ANAME # Name of the application
DJANGODIR=/home/$AUSER/egosite # Django project directory
SOCKFILE=/home/$AUSER/run/gunicorn.sock # we will communicte using this unix socket
USER=$AUSER # the user to run as
GROUP=$AUSER # the group to run as
NUM_WORKERS=3 # how many worker processes should Gunicorn spawn
DJANGO_SETTINGS_MODULE=egosite.settings # which settings file should Django use
DJANGO_WSGI_MODULE=egosite.wsgi # WSGI module name
 
echo "Starting $NAME as `whoami`"
 
# Activate the virtual environment
cd $DJANGODIR
source ./egoenv/bin/activate
export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=$DJANGODIR:$PYTHONPATH
 
# Create the run directory if it doesn't exist
RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR
 
# Start your Django Unicorn
# Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)
exec egoenv/bin/gunicorn ${DJANGO_WSGI_MODULE}:application \
    --name $NAME \
    --workers $NUM_WORKERS \
    --user=$USER --group=$GROUP \
    --log-level=debug \
    --bind=unix:$SOCKFILE

(egoenv)egosite@ip-172-31-22-161:~/egosite$ vi egoenv/bin/gunicorn_start
(egoenv)egosite@ip-172-31-22-161:~/egosite$ chmod u+x egoenv/bin/gunicorn_start

#Starting and monitoring with Supervisor

When Supervisor is installed you can give it programs to start and watch by creating configuration files in the /etc/supervisor/conf.d directory. For our egosite application we'll create a file named /etc/supervisor/conf.d/egosite.conf with this content:

[program:egosite]
command = /home/egosite/egosite/egoenv/bin/gunicorn_start ; Command to start app
user = egosite ; User to run as
stdout_logfile = /home/egosite/logs/gunicorn_supervisor.log ; Where to write log messages
redirect_stderr = true ; Save stderr in the same log

Creem el directori pels logs

mkdir -p /home/egosite/logs/
touch /home/egosite/logs/gunicorn_supervisor.log

And then:

jtorrents@ip-172-31-22-161:~$ sudo supervisorctl reread
egosite: available
jtorrents@ip-172-31-22-161:~$ sudo supervisorctl update
egosite: added process group

# Nginx (add subdoman for the survey)

Each Nginx virtual server should be described by a file in the /etc/nginx/sites-available directory. You select which sites you want to enable by making symbolic links to those in the /etc/nginx/sites-enabled directory.

We create: /etc/nginx/sites-available/egosite

upstream egosite_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/home/egosite/run/gunicorn.sock fail_timeout=0;
}

server {

    listen   80;
    server_name ec2-54-194-34-179.eu-west-1.compute.amazonaws.com;

    client_max_body_size 4G;

    access_log /home/egosite/logs/nginx-access.log;
    error_log /home/egosite/logs/nginx-error.log;
 
    location /static/ {
        alias   /home/egosite/egosite/static/;
    }
    
    location /media/ {
        alias   /home/egosite/egosite/media/;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://egosite_app_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504;
    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #    root /home/egosite/egosite/static/;
    #}
}


Add symlink to activate the virtualhost

sudo ln -s /etc/nginx/sites-available/egosite /etc/nginx/sites-enabled/egosite

sudo service nginx restart 
